#pragma once
#include <iostream>
#include <initializer_list>

template<typename T>
class FList
{
	struct node {
		node(T data)
			:next{ nullptr }
			, prev{ nullptr }
			, asc{ nullptr }
			, desc{ nullptr }
			, data{ data }
		{}

		node* next;
		node* prev;
		node* asc;
		node* desc;
		T data;
	};

public:
	FList()
		:head{ nullptr }
		, tail{ nullptr }
		, m_asc{ nullptr }
		, m_desc{ nullptr }
	{}
	FList(T data)
	{
		head = new node(data);
		tail = m_asc = m_desc = head;
	}

	FList(const FList<T>& rhs)
	{
		node* tcur = this-> head;
		node* rcur = rhs.head;
		node* tmpp = new node(rcur->data);
		head = tail = m_asc = m_desc = tmpp;
		rcur = rcur->next;
		while (rcur)
		{
			push_back(rcur->data);
			rcur = rcur->next;
		}
	}

public:
	void push_back(T);
	void push_front(T);
	void pop_back();
	void pop_front();
	//void insert(const T&, int);
	bool empty();
	void erase();
	void sort_FList(node*);
	void print();
	node* end();
	iterator begin();

public:
	class iterator {
		node* itptr;
	public:
		bool operator==(node* rhs)
		{
			return (itptr == rhs) ? true : false;
		}

		bool operator!=(node* rhs)
		{
			return (itptr != rhs) ? true : false;
		}

		void  operator++()
		{
			itptr = itptr->next;
		}

		void operator--()
		{
			itptr = itptr->prev;
		}

		iterator operator=(const iterator* rhs)
		{
			itptr = rhs;
			return itptr;
		}

		T& operator*()
		{
			return itptr->data;
		}

		iterator begin()
		{
			return head;
		}

		iterator end()
		{
			return nullptr;
		}

		iterator min()
		{
			return m_asc;
		}

		iterator max()
		{
			return m_desc;
		}

		iterator ascending(node* it)
		{
			it = it->asc;
		}

		iterator descending(node* it)
		{
			it = it->desc;
		}
	};

private:
	
	node* head;
	node* tail;
	node* m_asc;
	node* m_desc;

};

template <typename T>
void FList<T>::push_back(T data)
{
	node* tmp = new node(data);
	tail->next = tmp;
	tmp->next = nullptr;
	tmp->prev = tail;
	tail = tmp;
	sort_FList(tmp);
}

template<typename T>
void FList<T>::push_front(T data)
{
	node* tmp = new node(data);
	tmp->next = head;
	head->prev = tmp;
	head = tmp;
	sort_FList(tmp);
	
}

template<typename T>
void FList<T>::pop_back()
{
	if (!head) 
	{
		std::cout << "There is no element in the list." << std::endl;
		return;
	}
	
	if (!head->next)
	{
		delete head;
		head = nullptr;
		tail = nullptr;
		m_asc = nullptr;
		m_desc = nullptr;
		return;
	}
	
	node* tmp = tail;
	tail = tail->prev;
	tail -> next = nullptr;
	if(tmp==m_desc)
	{
		tmp->desc->asc = nullptr;
		m_desc = tmp->desc;
		delete tmp;
		return;
	}

	if (tmp == m_asc)
	{
		tmp->asc->desc = nullptr;
		m_asc = tmp->asc;
		delete tmp;
		return;
	}

	tmp->desc->asc = tmp->asc;
	tmp->asc->desc = tmp->desc;
	delete tmp;
}

template<typename T>
void FList<T>::pop_front()
{
	if (!head)
	{
		std::cout << "There is no element to pop in the list." << std::endl;
		return;
	}
	
	if (!head->next)
	{
		delete head;
		head = nullptr;
		tail = nullptr;
		m_asc = nullptr;
		m_desc = nullptr;
		return;
	}

	node* tmp = head;
	head = head->next;
	head->prev = nullptr;
	if (tmp == m_desc)
	{
		tmp->desc->asc = nullptr;
		m_desc = tmp->desc;
		delete tmp;
		return;
	}

	if (tmp == m_asc)
	{
		tmp->asc->desc = nullptr;
		m_asc = tmp->asc;
		delete tmp;
		return;
	}
	tmp->desc->asc = tmp->asc;
	tmp->asc->desc = tmp->desc;
	delete tmp;
}

template <typename T>
void FList<T>::sort_FList(node* pn)
{
	if (pn->data <= m_asc->data)
	{
		pn->desc = nullptr;
		m_asc->desc = pn;
		pn->asc = m_asc;
		m_asc = pn;
		return;
	}

	if (pn->data >= m_desc->data)
	{
		m_desc->asc = pn;
		pn->asc = nullptr;
		pn->desc = m_desc;
		m_desc = pn;
		return;
	}

	node* cur = m_asc;
	while (cur->data < pn->data)
	{
		cur = cur->asc;
	}
	cur->desc->asc = pn;
	pn->asc = cur;
	pn->desc = cur->desc;
	cur->desc = pn;
}

//template<typename T>
//void FList<T>::insert(const T& data, int pos)
//{
//	if (0 == pos)
//	{
//		FList<T>::push_front(data);
//		return;
//	}
//
//	FList<T>::node* cur = head;
//	while (cur and pos>0)
//	{
//		cur = cur -> next;
//		--pos;
//		if(!cur->next) {}
//	}
//
//	FList<T>::node* tmp = new node(data);
//	cur->prev->next = tmp;
//	tmp->prev = cur->prev;
//	tmp->next = cur;
//	sort_FList(tmp);
//}

template <typename T>
void FList<T>::print()
{
	node* tmp = head;
	std::cout << "HEAD >> ";
	while (tmp != nullptr)
	{

		std::cout << tmp->data << " -> ";
		tmp = tmp->next;
	}
	std::cout <<std:: endl;

	tmp = m_asc;
	std::cout << "ASC  >> ";
	while (tmp != nullptr)
	{

		std::cout << tmp->data << " -> ";
		tmp = tmp->asc;
	}
	std::cout << std::endl;

	tmp = tail;
	std::cout << "TAIL >> ";
	while (tmp != nullptr)
	{

		std::cout << tmp->data << " -> ";
		tmp = tmp->prev;
	}
	std::cout << std::endl;

	tmp = m_desc;
	std::cout << "DESC >> ";
	while (tmp != nullptr)
	{

		std::cout << tmp->data << " -> ";
		tmp = tmp->desc;
	}
	std::cout << std::endl;
}


int main() {
	FList<int> list(5);
	list.push_back(3);
	list.push_back(8);
	list.push_back(4);
	list.push_back(1);
	list.push_front(1);
	FList<int>::iterator it;
	it = list.begin();
	list.print();
	while (it != nullptr)
	{
		std::cout << *it << "-->";
	}
	std::cout << std::endl;
}
